# -*- coding: utf-8 -*-
"""Missing Credit Report Agent

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tv4jrU2x4GCnxY-nBQ8kMGeFzTWu25-K
"""


import pandas as pd
import os
import re
from tkinter import Tk, filedialog

def pick_file(title):
    root = Tk()
    root.withdraw()  # Hide the main window
    file_path = filedialog.askopenfilename(title=title, filetypes=[('CSV Files', '*.csv'), ('All Files', '*.*')])
    root.destroy()
    if not file_path:
        print('No file selected. Exiting.')
        exit(1)
    return file_path

def extract_quarter_year(po):
    # Example PO #: Q323 ONMK Akynzeo Rbt 8%
    match = re.match(r'Q(\d)(\d{2})', str(po).strip())
    if match:
        quarter = int(match.group(1))
        year = int('20' + match.group(2))  # e.g., '23' -> 2023
        return quarter, year
    return None, None

print("This tool will compare two CSV files and report rows present in the second (comparer) but missing in the first (base), using only columns common to both.\n")

base_file = pick_file("Select the BASE CSV file (the one to check for missing data)")
comparer_file = pick_file("Select the COMPARER CSV file (the one to compare against)")

# Load CSVs
df_base = pd.read_csv(base_file)
df_comparer = pd.read_csv(comparer_file)

# Use 'DRUG NAME' if present, else try to extract from 'DESCRIPTION' or 'PO #' (fallback)
def get_drug_name(row):
    if 'DRUG NAME' in row and pd.notna(row['DRUG NAME']):
        return str(row['DRUG NAME']).strip()
    if 'DESCRIPTION' in row and pd.notna(row['DESCRIPTION']):
        # Try to extract a word after 'Credit memo :' or similar
        m = re.search(r'Credit memo\s*:\s*([^\-]+)', str(row['DESCRIPTION']))
        if m:
            return m.group(1).strip()
    if 'PO #' in row and pd.notna(row['PO #']):
        # Try to extract after quarter code
        m = re.match(r'Q\d{3,4}\s*(.*)', str(row['PO #']))
        if m:
            return m.group(1).strip()
    return ''

for df in [df_base, df_comparer]:
    if 'DRUG NAME' not in df.columns:
        df['DRUG NAME'] = df.apply(get_drug_name, axis=1)
    else:
        df['DRUG NAME'] = df['DRUG NAME'].fillna('').astype(str).str.strip()

# Use QUARTER KEY if present in both, else extract quarter/year from PO #
use_quarter_key = 'QUARTER KEY' in df_base.columns and 'QUARTER KEY' in df_comparer.columns

if use_quarter_key:
    print("Using 'DRUG NAME' and 'QUARTER KEY' for sorting and comparison.")
    sort_cols = ['DRUG NAME', 'QUARTER KEY']
    df_base_sorted = df_base.sort_values(sort_cols, ascending=[True, True]).reset_index(drop=True)
    df_comparer_sorted = df_comparer.sort_values(sort_cols, ascending=[True, True]).reset_index(drop=True)
else:
    print("'QUARTER KEY' not found in both files. Falling back to extracting quarter/year from 'PO #'.")
    for df in [df_base, df_comparer]:
        quarters, years = zip(*df['PO #'].map(extract_quarter_year))
        df['Quarter'] = quarters
        df['Year'] = years
    sort_cols = ['DRUG NAME', 'Year', 'Quarter']
    df_base_sorted = df_base.sort_values(sort_cols, ascending=[True, True, True]).reset_index(drop=True)
    df_comparer_sorted = df_comparer.sort_values(sort_cols, ascending=[True, True, True]).reset_index(drop=True)

# Find common columns
common_cols = list(set(df_base_sorted.columns) & set(df_comparer_sorted.columns))
if not common_cols:
    print("No common columns found between the two files. Cannot compare.")
    exit(1)

print("\nCommon columns used for comparison:")
for col in common_cols:
    print("  - {}".format(col))

# Compare: find rows in comparer not in base (on common columns)
base_subset = df_base_sorted[common_cols].drop_duplicates()
comparer_subset = df_comparer_sorted[common_cols].drop_duplicates()

missing_rows = comparer_subset.merge(base_subset, on=common_cols, how='left', indicator=True)
missing_rows = missing_rows[missing_rows['_merge'] == 'left_only']
missing_rows = missing_rows.drop(columns=['_merge'])

# Merge with original comparer to get all columns, then reindex to match base/comparer columns
full_missing = df_comparer_sorted.merge(missing_rows, on=common_cols, how='inner')
# Define the desired column order
final_columns = ['ACCOUNT', 'PO #', 'DESCRIPTION', 'CREDIT AMT', 'DRUG LETTER', 'DRUG NAME', 'QUARTER KEY']
# Add any missing columns as blank
for col in final_columns:
    if col not in full_missing.columns:
        full_missing[col] = ''
full_missing = full_missing[final_columns]

# Save result
output_file = 'Missing_Credit_Report.csv'
full_missing.to_csv(output_file, index=False)

print("\nComparison complete!")
print("Rows present in comparer but missing in base: {}".format(len(full_missing)))
print("Missing rows saved to '{}'".format(output_file))

print("\nGUI & Automation Reminder: This is your first step toward a full GUI! You can further enhance this with Streamlit, Gradio, or automate it as needed. Let me know when you want to continue!")

